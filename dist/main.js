!function(t){var n={};function e(a){if(n[a])return n[a].exports;var r=n[a]={i:a,l:!1,exports:{}};return t[a].call(r.exports,r,r.exports,e),r.l=!0,r.exports}e.m=t,e.c=n,e.d=function(t,n,a){e.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:a})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,n){if(1&n&&(t=e(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var a=Object.create(null);if(e.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var r in t)e.d(a,r,function(n){return t[n]}.bind(null,r));return a},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},e.p="",e(e.s=0)}([function(t,n,e){"use strict";var a=e(1);const r="KJcLpsEHn1PkRBnZLa5825iT94JQOhaSSwEa2xry",o="https://api.nal.usda.gov/ndb/",l=Object.freeze({responseFormat:"json",sortType:"r",maxResults:10,startAtIndex:0}),s=document.getElementById("FoodSelect"),i=document.getElementById("Query"),d=s.querySelector("select"),u=document.getElementById("LabelWrapper"),c='<option value="default" selected>Waiting for your search</option>';new class{constructor(t){const{responseFormat:n,sortType:e,maxResults:a,startAtIndex:r}=Object.assign({},l,t);this.responseFormat=n,this.sortType=e,this.maxResults=a,this.startAtIndex=r,d.innerHTML=c;let o=null;i.addEventListener("keyup",()=>{o&&clearTimeout(o),o=setTimeout(()=>{this.search(i.value)},500)})}async search(t){if(d.disabled=!0,!t)throw new Error("Missing searchTerm in query.");d.innerHTML='<option value="default">Loading...</option>';const n=await this.getFoodItemsForSearchTerm(t);if(n.errors)throw d.innerHTML=c,new Error(`Found no results for ${t}`);this.buildFoodOptionsSelect(n),d.addEventListener("change",async t=>{if(this.foodItemNumber=t.currentTarget.value,"default"===this.foodItemNumber)return;const n=await this.getNutritionInfo(this.foodItemNumber),e=this.parseNutrientInfoForLabel(n.foods[0].food.nutrients),r=Object.values(e).reduce((t,n)=>(t[n.label]=n.info,t),{});u.innerHTML=(0,a.label)(r)})}async getFoodItemsForSearchTerm(t){const n=this.getFoodQueryURL({searchTerm:t});return await this.fetchSearchResults(n)}async fetchSearchResults(t){const n=await fetch(t);return await n.json()}getFoodQueryURL({searchTerm:t}){const n=encodeURI(t);return o+"search/?format="+this.responseFormat+"&sort="+this.sortType+"&max="+this.maxResults+"&offset="+this.startAtIndex+"&ds=Standard%20Reference&q="+n+"&api_key="+r}buildFoodOptionsSelect(t){const n=t.list.item.reduce((t,n)=>t+=`<option value='${n.ndbno}'>${n.name}</option>`,'<option value="default" selected>Choose a food from the results</option>');return d.innerHTML=n,d.disabled=!1,{UIContainer:s,selectElement:d}}async getNutritionInfo(t){const n=this.getFoodReportURL(t);return await this.fetchSearchResults(n)}getFoodReportURL(t){return o+"/V2/reports?ndbno="+t+"&type=b&format=json&api_key="+r}parseNutrientInfoForLabel(t){const n={Energy:{label:"Calories",info:{}},"Total lipid (fat)":{label:"Total Fat",info:{}},"Fatty acids, total saturated":{label:"Saturated Fat",info:{}},"Fatty acids, total trans":{label:"Trans Fat",info:{}},Cholesterol:{label:"Cholesterol",info:{}},"Sodium, Na":{label:"Sodium",info:{}},"Carbohydrate, by difference":{label:"Total Carbohydrate",info:{}},"Fiber, total dietary":{label:"Dietary Fiber",info:{}},"Sugars, total":{label:"Sugars",info:{}},Protein:{label:"Protein",info:{}},"Vitamin A, IU":{label:"Vitamin A",info:{}},"Vitamin C, total ascorbic acid":{label:"Vitamin C",info:{}},"Calcium, Ca":{label:"Calcium",info:{}},"Iron, Fe":{label:"Iron",info:{}}};return Object.keys(n).forEach(e=>{n[e].info=this.getNutrientMeasures(t.find(t=>t.name===e))}),n}getNutrientMeasures(t){return t?{name:t.name,value:t.value,unit:t.unit,quantity:t.measures[0].qty,label:t.measures[0].label}:{name:t,value:0,unit:"g",quantity:null,label:null}}}},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0});const a=65,r=20,o=300,l=2400,s=300,i=25,d=5e3,u=90,c=1300,h=18;n.label=function(t){return`<section class="performance-facts">\n      <header class="performance-facts__header">\n        <h1 class="performance-facts__title">Nutrition Facts</h1>\n        <p>Serving Size ${t.Calories.quantity} ${t.Calories.label}\n        </p>\n      </header>\n      <table class="performance-facts__table">\n        <thead>\n          <tr>\n            <th colspan="3" class="small-info">\n              Amount Per Serving\n            </th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <th colspan="2">\n              <b>Calories</b>\n              ${t.Calories.value}\n            </th>\n            <td>\n              Calories from Fat\n              ${Math.ceil(9*t["Total Fat"].value)}\n            </td>\n          </tr>\n          <tr class="thick-row">\n            <td colspan="3" class="small-info">\n              <b>% Daily Value*</b>\n            </td>\n          </tr>\n          <tr>\n            <th colspan="2">\n              <b>Total Fat</b>\n              ${t["Total Fat"].value}${t["Total Fat"].unit}\n            </th>\n            <td>\n              <b>${Math.ceil(t["Total Fat"].value/a*100)}%</b>\n            </td>\n          </tr>\n          <tr>\n            <td class="blank-cell">\n            </td>\n            <th>\n              Saturated Fat\n              ${t["Saturated Fat"].value}${t["Saturated Fat"].unit}\n            </th>\n            <td>\n              <b>${Math.ceil(t["Saturated Fat"].value/r*100)}%</b>\n            </td>\n          </tr>\n          <tr>\n            <td class="blank-cell">\n            </td>\n            <th>\n              Trans Fat\n              ${t.Sugars.value}${t.Sugars.unit}\n            </th>\n            <td>\n            </td>\n          </tr>\n          <tr>\n            <th colspan="2">\n              <b>Cholesterol</b>\n              ${t.Cholesterol.value}${t.Cholesterol.unit}\n            </th>\n            <td>\n            <b>${Math.ceil(t.Cholesterol.value/o*100)}%</b>\n            </td>\n          </tr>\n          <tr>\n            <th colspan="2">\n              <b>Sodium</b>\n              ${t.Sodium.value}${t.Sodium.unit}\n            </th>\n            <td>\n            <b>${Math.ceil(t.Sodium.value/l*100)}%</b>\n            </td>\n          </tr>\n          <tr>\n            <th colspan="2">\n              <b>Total Carbohydrate</b>\n              ${t["Total Carbohydrate"].value}${t["Total Carbohydrate"].unit}\n            </th>\n            <td>\n            <b>${Math.ceil(t["Total Carbohydrate"].value/s*100)}%</b>\n            </td>\n          </tr>\n          <tr>\n            <td class="blank-cell">\n            </td>\n            <th>\n              Dietary Fiber\n              ${t["Dietary Fiber"].value}${t["Dietary Fiber"].unit}\n            </th>\n            <td>\n            <b>${Math.ceil(t["Dietary Fiber"].value/i*100)}%</b>\n            </td>\n          </tr>\n          <tr>\n            <td class="blank-cell">\n            </td>\n            <th>\n              Sugars\n              ${t.Sugars.value}${t.Sugars.unit}\n            </th>\n            <td>\n            </td>\n          </tr>\n          <tr class="thick-end">\n            <th colspan="2">\n              <b>Protein</b>\n              ${t.Protein.value}${t.Protein.unit}\n            </th>\n            <td>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n      <table class="performance-facts__table--grid">\n        <tbody>\n          <tr>\n            <td colspan="2">\n              Vitamin A\n              ${Math.ceil(t["Vitamin A"].value/d*100)}%\n            </td>\n            <td>\n              Vitamin C\n              ${Math.ceil(t["Vitamin C"].value/u*100)}%\n            </td>\n          </tr>\n          <tr class="thin-end">\n            <td colspan="2">\n              Calcium\n              ${Math.ceil(t.Calcium.value/c*100)}%\n            </td>\n            <td>\n              Iron\n              ${Math.ceil(t.Iron.value/h*100)}%\n            </td>\n          </tr>\n        </tbody>\n      </table>\n      <p class="small-info">* Percent Daily Values are based on a 2,000 calorie diet. Your daily values may be higher or\n        lower depending on your calorie needs:</p>\n      <table class="performance-facts__table--small small-info">\n        <thead>\n          <tr>\n            <td colspan="2"></td>\n            <th>Calories:</th>\n            <th>2,000</th>\n            <th>2,500</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <th colspan="2">Total Fat</th>\n            <td>Less than</td>\n            <td>65g</td>\n            <td>80g</td>\n          </tr>\n          <tr>\n            <td class="blank-cell"></td>\n            <th>Saturated Fat</th>\n            <td>Less than</td>\n            <td>20g</td>\n            <td>25g</td>\n          </tr>\n          <tr>\n            <th colspan="2">Cholesterol</th>\n            <td>Less than</td>\n            <td>300mg</td>\n            <td>300 mg</td>\n          </tr>\n          <tr>\n            <th colspan="2">Sodium</th>\n            <td>Less than</td>\n            <td>2,400mg</td>\n            <td>2,400mg</td>\n          </tr>\n          <tr>\n            <th colspan="3">Total Carbohydrate</th>\n            <td>300g</td>\n            <td>375g</td>\n          </tr>\n          <tr>\n            <td class="blank-cell"></td>\n            <th colspan="2">Dietary Fiber</th>\n            <td>25g</td>\n            <td>30g</td>\n          </tr>\n        </tbody>\n      </table>\n      <p class="small-info">\n        Calories per gram:\n      </p>\n      <p class="small-info text-center">\n        Fat 9\n        •\n        Carbohydrate 4\n        •\n        Protein 4\n      </p>\n    </section>`}}]);